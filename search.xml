<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>NEXT主题使用说明</title>
    <url>/2022/10/24/NEXT%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a><center>MarkDown</center></h1><h2 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h2><p>Markdown最上方<code>---</code>分割区域Next预定义参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td>博客名</td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启评论功能</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td>excerpt</td>
<td></td>
<td></td>
</tr>
<tr>
<td>disableNunjucks</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lang</td>
<td>语言</td>
<td></td>
</tr>
</tbody></table>
<p>tags和categories等可以设置多个值：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">tag1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">tag2</span>	</span><br></pre></td></tr></table></figure>

<p>该方法会使tag2成为tag1的子标签，要设置同级标签，应用一下方式，其中父标签1,2,3是同级标签，categories分类标签同理</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> [<span class="string">父标签1</span>, <span class="string">子标签1</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">父标签2</span>, <span class="string">子标签2</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">父标签3</span>]</span><br></pre></td></tr></table></figure>

<h1 id="日程表"><a href="#日程表" class="headerlink" title="日程表"></a>日程表</h1><p>由于使用type&#x3D;”schedule”	时无法正确显示Markdown，所以将type改为about</p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>使用本地插入时，绝对路径和相对路径都无法加载图片，所以采用图床的方式插入图片，<a href="https://sm.ms/">SM.MS</a>，上传图片后以网络链接的形式插入图片</p>
]]></content>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟与高精度</title>
    <url>/2022/10/26/%E6%A8%A1%E6%8B%9F%E4%B8%8E%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="A-B-Problem"><a href="#A-B-Problem" class="headerlink" title="A*B Problem"></a><center>A*B Problem</center></h1><p>题目：输入A，B，求A*B的值</p>
<p>若A的长度为n，B的长度为m，则A*B的长度&lt;&#x3D;n+m,由此确定结果数组的长度。模拟进行A*B运算，B由低到高每一位与A的每一位相乘，由于I，j从0开始，故可以用i+j确定每位相乘的结果是结果数组的第几位。</p>
<p>进行运算前先把输入的A，B逆序以便于计算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* numA = <span class="keyword">new</span> <span class="type">int</span>[a.<span class="built_in">length</span>()];</span><br><span class="line">	<span class="type">int</span>* numB = <span class="keyword">new</span> <span class="type">int</span>[b.<span class="built_in">length</span>()];</span><br><span class="line">	<span class="type">int</span>* res = <span class="keyword">new</span> <span class="type">int</span>[a.<span class="built_in">length</span>() + b.<span class="built_in">length</span>()];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>() + b.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">		res[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); ++i) &#123;	<span class="comment">//倒序把字符串转换为数字数组</span></span><br><span class="line">		numA[i] = a[a.<span class="built_in">length</span>() - i - <span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">length</span>(); ++i)&#123;</span><br><span class="line">		numB[i] = b[b.<span class="built_in">length</span>() - i - <span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; b.<span class="built_in">length</span>(); ++j) &#123;</span><br><span class="line">			res[i + j] += numA[i] * numB[j];</span><br><span class="line">			<span class="keyword">if</span> (res[i+j]&gt;<span class="number">9</span>) res[i + j+<span class="number">1</span>] += res[i + j]/<span class="number">10</span>;</span><br><span class="line">			res[i + j] = res[i + j] % <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;	<span class="comment">//是否已去除前面的0</span></span><br><span class="line">	<span class="keyword">for</span> (i = a.<span class="built_in">length</span>() + b.<span class="built_in">length</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) &#123;	<span class="comment">//输出</span></span><br><span class="line">		<span class="keyword">if</span> (res[i])	flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (flag)	cout &lt;&lt; res[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!flag) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;	<span class="comment">//如果全是0，输出一个0</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span>[] numA;</span><br><span class="line">	<span class="keyword">delete</span>[] numB;</span><br><span class="line">	<span class="keyword">delete</span>[] res;</span><br></pre></td></tr></table></figure>

<h1 id="N！之和问题"><a href="#N！之和问题" class="headerlink" title="N！之和问题"></a><center>N！之和问题</center></h1><p>求解阶乘之和</p>
<p>就是把高精乘和高精加结合起来，但在处理高精乘进位时，应该把所有的位数遍历一遍</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">90</span>; ++j) &#123;</span><br><span class="line">	<span class="keyword">if</span> (now[j] &gt; <span class="number">9</span>) &#123;</span><br><span class="line">		now[j + <span class="number">1</span>] += now[j] / <span class="number">10</span>;</span><br><span class="line">		now[j] %= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若使用判断的方法，可能会出现这一位不大于9但下面的位大于9的情况，造成出错</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(now[count]&gt;<span class="number">9</span>)&#123;	<span class="comment">//进位</span></span><br><span class="line">	now[count + <span class="number">1</span>] += now[count] / <span class="number">10</span>;</span><br><span class="line">	now[count] %=  <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2022/11/06/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a><center>二叉树</center></h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><center>遍历</center></h2><p>前序遍历 <code>根-左-右</code>		中序遍历 <code>左-根-右</code>		后序遍历 <code>左-右-根</code></p>
<p><img src="https://s2.loli.net/2022/11/06/FrwMeBjslUpYDuH.png" alt="二叉树图.png"></p>
<p>前序遍历A-B-D-F-G-H-I-E-C</p>
<p>中序遍历F-D-H-G-I-B-E-A-C</p>
<p>后序遍历F-H-I-G-D-E-B-C-A</p>
<p>对二叉树进行遍历，前序和中序用栈而后序用两个栈实现从最后开始输出</p>
<p><em>先序遍历代码实现：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//深度优先遍历 非递归先序遍历 头=&gt;左=&gt;右</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrderUnRecur</span><span class="params">(BinaryTree* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		stack&lt;BinaryTree*&gt; stk;	<span class="comment">//定义一个栈</span></span><br><span class="line">		stk.<span class="built_in">push</span>(head);</span><br><span class="line">		<span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			head = stk.<span class="built_in">top</span>();</span><br><span class="line">			stk.<span class="built_in">pop</span>();</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; endl;	<span class="comment">//处理语句</span></span><br><span class="line">			<span class="keyword">if</span> (head-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				stk.<span class="built_in">push</span>(head-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (head-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				stk.<span class="built_in">push</span>(head-&gt;left);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>中序遍历代码实现</em></p>
<p>中序遍历时先把所有左节点入栈，遇到空指针时出一个左节点并把其右节点入栈，</p>
<p>并在此时进行操作，就可以实现左-中-右的遍历</p>
<p>​	</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历	左=&gt;头=&gt;右</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrderUnRecur</span><span class="params">(BinaryTree* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		stack&lt;BinaryTree*&gt; stk;</span><br><span class="line">		<span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()||head!=<span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				stk.<span class="built_in">push</span>(head);</span><br><span class="line">				head = head-&gt;left;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				head = stk.<span class="built_in">top</span>();</span><br><span class="line">				cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">				stk.<span class="built_in">pop</span>();</span><br><span class="line">				head = head-&gt;right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>后序遍历代码实现：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历	左=&gt;右=&gt;头 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">posOrderUnRecur</span><span class="params">(BinaryTree* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		stack&lt;BinaryTree*&gt; stk1;</span><br><span class="line">		stack&lt;BinaryTree*&gt; stk2;</span><br><span class="line">		stk1.<span class="built_in">push</span>(head);</span><br><span class="line">		<span class="keyword">while</span> (!stk1.<span class="built_in">empty</span>()) &#123;	<span class="comment">//弹出时不操作而是放入另一个栈中</span></span><br><span class="line">			head = stk1.<span class="built_in">top</span>();</span><br><span class="line">			stk2.<span class="built_in">push</span>(head);</span><br><span class="line">			stk1.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span> (head-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				stk1.<span class="built_in">push</span>(head-&gt;right);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (head-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				stk1.<span class="built_in">push</span>(head-&gt;left);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!stk2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; stk2.<span class="built_in">top</span>()-&gt;val &lt;&lt; endl;</span><br><span class="line">			stk2.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		对三种遍历结果进行观察，前序的最前边是头节点，而后序的最后一个是头节点，然后根据中序遍历的结果可以进行二叉树复原，但只有前序和后序是无法复原的。</p>
<h2 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a><center>祖先</center></h2><h4 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h4>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>类与对象</title>
    <url>/2022/12/27/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul>
<li><p>对象：具体的事物</p>
</li>
<li><p>类：概念，模板，抽象的描述</p>
</li>
</ul>
<h4 id="类的代码定义"><a href="#类的代码定义" class="headerlink" title="类的代码定义"></a>类的代码定义</h4><p><strong>格式：public class 类名 {}</strong></p>
<p>命名规范： 类目必须与所在的文件名一致，要求首字母大写，使用驼峰命名规范</p>
<p>内容：</p>
<p>​	成员属性：数据类型 数据名</p>
<p>​	成员方法：修饰词 返回值类型 方法名（参数类型 参数名） {}</p>
<p>​	任何方法都要放在类的结构中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    String userName;</span><br><span class="line">    String userPwd;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="type">boolean</span> isOnline;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String oldpwd, String newpwd)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="封装属性"><a href="#封装属性" class="headerlink" title="封装属性"></a>封装属性</h2><ul>
<li><p>将成员属性私有化，限制对属性的调用，针对每一个属性对设置对应的 赋值方法和获取方法</p>
</li>
<li><p>优点： </p>
<ul>
<li>set属性时 ，可以对传入参数进行验证，保证数据规范安全 </li>
<li>get属性时，可以对需要返回数据进行整合处理 返回对方需要的格式类型 </li>
<li>结构更清晰  size(w,h); 简化代码 整合数据 </li>
<li>读写分离，存在一些属性，不暴露 读&#x2F;写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isOnline;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserPwd</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAge</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserScore</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserPwd</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserAge</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserScore</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getUserOnline</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String oldpwd, String newpwd)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化： 构造方法<ul>
<li>格式：类名 （参数列表）{}    没有返回值结构</li>
<li>每个类都自带一个隐式的空参数构造方法 ，一旦自己写了构造方法，不管有无参数 都会覆盖隐式的 </li>
<li>构造方法可以重组</li>
<li>构造方法在创建对象时调用，且只被调用一次</li>
</ul>
</li>
<li>私有化构造方法：<ul>
<li>私有化构造可有令该类不能在类的外部创建对象，对创建对象的权限做了限制</li>
</ul>
</li>
<li>单例：<ul>
<li>单例类只能有一个对象存在</li>
<li>将构造方法私有化后在单例类中创建一个公有 静态 的对象，该对象可以在类外部通过类名直接调用</li>
<li>在类中创建类对象若不添加static 关键字会导致不断递归创建该对象，导致死循环</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isOnline;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(String userName,String userPwd,<span class="type">int</span> age,<span class="type">int</span> score)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User king= <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;king&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getKing</span><span class="params">()</span>&#123;<span class="keyword">return</span> king&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserPwd</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserAge</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserScore</span><span class="params">(String userName)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserPwd</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserAge</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserScore</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getUserOnline</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String pwdin)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(String oldpwd, String newpwd)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工程</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2022/12/29/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul>
<li>继承格式 ： class 类名 extends 父类名 {}</li>
<li>访问修饰符：<ul>
<li>public 该项目所有文件</li>
<li>protrcted 子类及同包</li>
<li>private 本类及友类</li>
<li>无       同包下</li>
</ul>
</li>
<li>方法重写：<ul>
<li>在子类中重写父类中方法<ul>
<li>访问修饰词  权限不变或小权限变大权限，扩展开放原则</li>
<li>返回值类型  可以返回父类及父类的子类</li>
<li>不能修改参数表</li>
</ul>
</li>
</ul>
</li>
<li>类型转换：<ul>
<li>自动类型转换：基类指针可以指向子类，子类对象可以被自动转化为基类对象</li>
<li>强制类型转化：将基类对象转化子类对象，需要进行强制类型转换，强制向下转型需要验证是否合法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>工程</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-DDL</title>
    <url>/2022/12/30/MySQL1/</url>
    <content><![CDATA[<h1 id="一、启动"><a href="#一、启动" class="headerlink" title="一、启动"></a>一、启动</h1><ul>
<li>使用MySQL终端输入密码后启动</li>
<li>使用CMD，输入 <code>mysql -u 用户名 -p</code>后启动</li>
</ul>
<h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><ul>
<li>关系型数据库：建立在关系模型的基础上，由多张相互连接的二维表组成的数据库</li>
<li>非关系型数据库：</li>
</ul>
<h1 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a>三、SQL</h1><h2 id="1-通用语法及分类"><a href="#1-通用语法及分类" class="headerlink" title="1.通用语法及分类"></a>1.通用语法及分类</h2><ul>
<li><p>通用语法</p>
<ol>
<li><p>可以单行或多行书写，以分号结尾</p>
</li>
<li><p>不区分大小写，关键字建议大写</p>
</li>
<li><p>单行注释： <code>--注释内容</code> or # <code>注释内容</code></p>
</li>
<li><p>多行注释：<code> /* 注释内容*/</code></p>
</li>
</ol>
</li>
<li><p>SQL分类</p>
<ol>
<li>DDL：定义语言，定义数据库对象</li>
<li>DML：操作语言，进行增删改查</li>
<li>DQL：查询语言，查询数据库中的记录</li>
<li>DCL：控制语言，创建用户，修改权限</li>
</ol>
</li>
</ul>
<h2 id="2-DDL"><a href="#2-DDL" class="headerlink" title="2.DDL"></a>2.DDL</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li>查询<ul>
<li>查询全部数据库 <code>show databases;</code></li>
<li>查询当前数据库<code>select database();</code></li>
</ul>
</li>
<li>创建<ul>
<li>创建数据库 <code>create database [if no exists] 名称 [default charset 字符集] [collate 排序规则]</code>,使用时去掉括号</li>
</ul>
</li>
<li>删除<ul>
<li><code>drop database [if exists] 名称</code></li>
</ul>
</li>
<li>使用(切换数据库)<ul>
<li><code>use 名称</code></li>
</ul>
</li>
</ul>
<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul>
<li><p>查询</p>
<ul>
<li>查询当前所有表	<code>show tables;</code></li>
<li>查询表结构   <code>desc 表名;</code></li>
</ul>
</li>
<li><p>创建</p>
<ul>
<li>&#96;&#96;&#96;<br>create table 表名(<br>字段1 字段1类型[comment 字段1注释]<br>…….<br>)[comment 表注释];<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```sql</span><br><span class="line">create table tb_user(</span><br><span class="line">	id int comment &#x27;编号&#x27;,</span><br><span class="line">	name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">	......</span><br><span class="line">	age int comment &#x27;年龄&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>数据类型</p>
<ul>
<li>整形	名称 整形类型 [unsigned]</li>
<li>浮点    名称 浮点类型(长度,小数位数)</li>
<li>定长字符串  char(最大长度)  长度一直是10,性能好</li>
<li>变长字符串  varchar(最大长度)  根据数据改变长度,性能较差</li>
<li>后缀为 lob 代表是二进制数据</li>
<li>date,time,year,datetime,timestamp</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">	workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">	gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">	age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">	entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改</p>
<ul>
<li><p>添加字段 <code>alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</code></p>
</li>
<li><p>修改字段数据类型 <code>alter table 表名 modify 字段名 新数据类型(长度);</code></p>
</li>
<li><p>修改字段名和类型 <code>alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</code></p>
</li>
<li><p>修改表名 <code>alter table 表名 rename to 新表名;</code></p>
</li>
<li><p>删除字段<code>alter table 表名 drop 字段名;</code></p>
</li>
<li><p>删除表 <code>drop table [if exists] 表名;</code></p>
</li>
<li><p>删除表后并重新创建该表<code>truncate table 表名;</code> 即留下一个空表</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>DML</title>
    <url>/2022/12/31/MySQL2/</url>
    <content><![CDATA[<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p><strong>DML用来对表中数据记录进行增删改操作</strong></p>
<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ul>
<li>给指定字段添加数据 <code>insert into 表名(字段名1,字段名2,...) values(值1,值2,...);</code></li>
<li>给全部字段添加数据 <code>insert into 表名 values(值1,值2,...);</code></li>
<li>批量添加数据<code>insert into 表名(字段名1,...) values(值1,...),(值1,...)...;</code></li>
</ul>
<p>注意:</p>
<p>​	<em>值与字段名一一对应;</em></p>
<p>​	<em>字符串和日期型数据应包含在引号中;</em></p>
<p>​	<em>插入的数据应在字段规定的范围内;</em></p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul>
<li><p><code>update 表名 set 字段名1=值1,...... [where 条件];</code> 若无条件则修改所有字段</p>
<pre><code>   如: `update employee set name = &#39;itheima&#39; where id = 1;`
</code></pre>
</li>
</ul>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li><code>dalete from 表名 [where 条件];</code></li>
</ul>
<p>  delete不能删除某个字段的值,应使用update把字段的值设为NULL</p>
<h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><h2 id="查询语言"><a href="#查询语言" class="headerlink" title="查询语言"></a>查询语言</h2><ul>
<li><p><strong>基本查询</strong></p>
<ul>
<li>查询多个字段 <code>select 字段1,字段2... from 表名;</code> or <code>select * from 表名;</code>查询所有字段</li>
<li>设置别名 <code>select 字段1 [as 别名],...... from 表名;</code></li>
<li>去除重复记录 <code>select distinct 字段列表 from 表名;</code></li>
</ul>
</li>
<li><p><strong>条件查询</strong></p>
<ul>
<li><p><code>select 字段列表 from 表名 where 条件列表;</code>  </p>
<p>like 占位符 模糊匹配(_匹配单个字符,%匹配任意个字符)</p>
<p><code>select * from emp where name like &#39;__&#39;;</code>表示匹配两个字符的</p>
<p><code>select * from emp where idcard like &#39;%X&#39;;</code> 匹配最后一个字符是X的</p>
<p>is null  是空</p>
<p>between … and … 某个范围内,闭区间</p>
<p>in (…)	在in之后列表中的值,多选一</p>
</li>
</ul>
</li>
<li><p><strong>聚合函数</strong></p>
<p>​	将一列数据作为一个整体,进行纵向计算</p>
<p>​	常见聚合函数:  <code>cout</code> ,<code>max</code>,<code>min</code> ,<code>avg</code> ,<code>sum</code>,对有值的数据进行计算,null不参与计算</p>
<ul>
<li><code>select 聚合函数(字段列表) from 表名</code></li>
</ul>
</li>
<li><p><strong>分组查询</strong></p>
<ul>
<li><p><code>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后的条件]</code></p>
<p>where不能对聚合函数进行判断,而having可以</p>
<p><code>select gender,count(*) from emp group by gender</code>根据性别进行分组</p>
</li>
</ul>
</li>
<li><p><strong>排序查询</strong></p>
<ul>
<li><p><code>select 字段列表 from 表名 order by 字段1 , 排序方式1,...;</code></p>
<p>asc: 升序 (默认)	desc: 降序	</p>
<p>多字段排序时,字段1的值相同后按字段2进行排序</p>
</li>
</ul>
</li>
<li><p><strong>分页查询</strong></p>
<ul>
<li><p><code>select 字段列表 from 表名 limit 起始索引,查询记录数;</code></p>
<p>起始索引从0开始,等于(查询页码-1)*每一页返回的记录数</p>
<p>若查询第一页的数据,起始引索可以省略,直接简写为</p>
<p>查询第一页 <code>select * from emp limit 10;</code></p>
<p>查询第二页 <code>select * from emp limit 10 , 10;</code></p>
</li>
</ul>
</li>
</ul>
<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p><strong>数据控制语言,用来管理数据库用户,控制数据库访问权限</strong></p>
<ul>
<li><p>查询用户</p>
<ul>
<li><code>use mysql;</code></li>
<li>select * from user;</li>
</ul>
</li>
<li><p>创建用户</p>
<ul>
<li><p><code>create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</code></p>
<p>主机名为 % 表示可以被任意主机访问</p>
</li>
</ul>
</li>
<li><p>修改用户密码</p>
<ul>
<li><code>alter user &#39;用户名&#39;@&#39;主机名&#39; identified with mysql_native_password by &#39;新密码&#39;;</code></li>
</ul>
</li>
<li><p>删除用户</p>
<ul>
<li><code>drop user &#39;用户名&#39;@&#39;主机名&#39;;</code></li>
</ul>
</li>
<li><p>权限控制</p>
<ul>
<li><p><code>all</code> 所有权限 	<code>select</code>	查询数据	<code>insert</code>	插入数据	<code>update</code>	修改数据</p>
<p><code>delete</code> 删除数据	<code>alter</code> 修改表	<code>drop</code> 删除数据库&#x2F;表&#x2F;视图	<code>create</code> 创建数据库</p>
</li>
</ul>
</li>
<li><p>查询权限</p>
<ul>
<li><code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></li>
</ul>
</li>
<li><p>授予权限</p>
<ul>
<li><code>grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</code></li>
</ul>
</li>
<li><p>撤销权限</p>
<ul>
<li><code>revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>图形化编程</title>
    <url>/2022/12/31/%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h1><h2 id="java图形化包"><a href="#java图形化包" class="headerlink" title="java图形化包"></a>java图形化包</h2><ul>
<li><p>java的图像包有java.awt  和javax.swing </p>
</li>
<li><p>组件: 按钮,输入框,窗体,图片,这些组件在各语言里都已经设计好了</p>
</li>
</ul>
<p>​	<strong>java窗体类 JFrame,使用import导入需要使用的类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Login</span>&#123;</span><br><span class="line">	<span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">	jf.setSize(<span class="number">450</span>,<span class="number">550</span>);	</span><br><span class="line">	jf.setTitle(<span class="string">&quot;登录界面&quot;</span>);	</span><br><span class="line">    <span class="comment">//居中</span></span><br><span class="line">	jf.setLocationRelativeTo(<span class="literal">null</span>); </span><br><span class="line">	<span class="comment">//退出进程  查看该方法原代码查看整形参数的含义</span></span><br><span class="line">    jf.setDefaultCloseOperation(<span class="number">3</span>); </span><br><span class="line">    <span class="comment">//流式布局管理器</span></span><br><span class="line">    FlowLayout flow=<span class="keyword">new</span> <span class="title class_">FlowLayout</span>();</span><br><span class="line">    <span class="comment">//设置窗体类为流式布局</span></span><br><span class="line">    jf.setLayout(flow);</span><br><span class="line">    <span class="comment">//按钮</span></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">jbu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">    jf.add(jbu);</span><br><span class="line">    <span class="comment">//设置可见</span></span><br><span class="line">    jf.setVisible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="type">ButtonListener</span> <span class="variable">listnener1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonListener</span>();</span><br><span class="line">    jbu1.addActionListener(listnener1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JFrame 窗体类</li>
<li>FlowLayout 流式布局</li>
<li>ImageIcon 图片读取</li>
<li>JLabel  标签类,用于承载图片,文字等</li>
<li>Dimension 布局类,除窗体外其他组件都需要使用该对象来设定布局</li>
<li>JButton 按钮类</li>
</ul>
<h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p>监听需新建一个类,继承自带的监视器类后重写其中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ButtonListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="comment">//事件处理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录中...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(Account.findAccount(Login.getUser(),Login.getPwd()))&#123;</span><br><span class="line">            showSuccess();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            showFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法是当按钮被按下时执行的程序</p>
]]></content>
      <categories>
        <category>工程</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数</title>
    <url>/2023/01/02/MySQL%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="一-字符串函数"><a href="#一-字符串函数" class="headerlink" title="一.字符串函数"></a>一.字符串函数</h2><ul>
<li><p><code>concat(s1,s2,...) </code>拼接字符串</p>
</li>
<li><p><code>lower(str)</code> 转换小写</p>
</li>
<li><p><code>upper(str)</code> 转换小写</p>
</li>
<li><p><code>lpad(str,n,pad)</code> 左填充,用字符串pad对str左边进行填充,达到n个字符串长度(总长度)</p>
</li>
<li><p><code>rpad(str,n,pad)</code> 左填充,用字符串pad对str右边进行填充,达到n个字符串长度(总长度)</p>
</li>
<li><p><code>trim(str)</code>去除头部和尾部的空格</p>
</li>
<li><p><code>substring(str,start,len)</code>返回从start起的len个长度的字符串</p>
</li>
</ul>
<h2 id="二-数值函数"><a href="#二-数值函数" class="headerlink" title="二.数值函数"></a>二.数值函数</h2><ul>
<li><p><code>ceil(x)</code> 向上取整</p>
</li>
<li><p><code>floor(x)</code> 向下取整</p>
</li>
<li><p><code>mod(x,y)</code> 返回x&#x2F;y的模</p>
</li>
<li><p><code>rand()</code>返回[0,1]之间的随机数</p>
</li>
<li><p><code>round(x,y)</code> 返回x四舍五入的值,保留y位小数</p>
<p>生成一个六位数的随机验证码</p>
<p><code>select lpad(round( rand()*1000000 , 0),6,&#39;0&#39;);</code></p>
</li>
</ul>
<h2 id="三-日期函数"><a href="#三-日期函数" class="headerlink" title="三.日期函数"></a>三.日期函数</h2><ul>
<li><p><code>curdate()</code>返回当前日期</p>
</li>
<li><p><code>curtime()</code>返回当前时间</p>
</li>
<li><p><code>now()</code>返回当前日期和时间</p>
</li>
<li><p><code>year(data)</code>获取指定date的年份</p>
</li>
<li><p><code>month(data)</code>获取指定data的月份</p>
</li>
<li><p><code>day(data)</code>获取指定data的日期</p>
</li>
<li><p><code>date_add(data,INTERVAL expr type)</code>返回date加上一个时间间隔expr后的时间值</p>
<p><code>select date_add(now(),INTERVAL 70 DAY);</code> 现在时间加上70天</p>
</li>
<li><p><code>datediff(date1,date2)</code>返回date1和date2之间的天数</p>
</li>
</ul>
<h2 id="四-流程函数"><a href="#四-流程函数" class="headerlink" title="四.流程函数"></a>四.流程函数</h2><ul>
<li><code>if(value,t,f)</code> value为true,返回t反之返回f</li>
<li><code>ifnull(v1,v2)</code> v1不为空返回v1,为空返回v2</li>
<li><code>case when [v1] then [res1] ... else [default] end</code>若v1为true,返回res1,…否则返回default</li>
<li><code>case [expr] when [v1] then [res1] ... else [default] end</code> 若expr等于v1,返回res1,….否则返回default</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2023/01/03/%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>格式: <code>interface 接口名 &#123;&#125;</code></p>
<ul>
<li>接口中的变量默认以 statci final 修饰,必须初始化赋值</li>
<li>接口中可以定义抽象方法,静态方法和默认方法</li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol>
<li>创建一个类 实现 接口(继承接口) ,一个类可以实现多个接口但只能继承一个类</li>
<li>类中必须重写接口中的所有抽象方法</li>
<li>类中可以直接使用 接口中的变量,静态方法和默认方法</li>
</ol>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lock</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Door</span>&#123;</span><br><span class="line">    Lock lock;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">openDoor</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.open();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">closeDoor</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现 接口Lock</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">leyLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key 正确,开门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key 正确,关门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">calss Mange&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Door door= <span class="keyword">new</span> <span class="title class_">Door</span>();</span><br><span class="line">        keyLock keylock=<span class="keyword">new</span> <span class="title class_">keyLock</span>();</span><br><span class="line">        door.lock() = keylock; <span class="comment">//传入接口</span></span><br><span class="line">        </span><br><span class="line">        door.open();</span><br><span class="line">        door.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若要对锁进行升级或修改,对实现锁这个接口的类进行修改或再次创建一个类对锁进行实现,然后传入接口就可以了,避免了对门和锁的源码进行修改</p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul>
<li><p>抽象类： </p>
<ul>
<li>定义抽象方法</li>
<li>定义普通方法</li>
</ul>
</li>
<li><p>接口 &gt; 抽象类 &gt; 类： </p>
</li>
<li><p>设计 &gt; 半成品 &gt; 成品 </p>
</li>
<li><p>依赖不能导致： </p>
<ul>
<li>抽象类可以继承非抽象类,但不要这么做</li>
</ul>
</li>
<li><p>只要是抽象的都不可以实例化对象</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工程</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>约束</title>
    <url>/2023/01/03/MySQL%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li><p><code>primary key</code>主键</p>
</li>
<li><p><code>auto_increment</code>自动增长</p>
</li>
<li><p><code>not null</code>不为空</p>
</li>
<li><p><code>unique</code>不重复</p>
</li>
<li><p><code>check (条件列表)</code>检查约束,使符合某个条件</p>
</li>
<li><p><code>defualt 默认值</code> 默认约束</p>
<p>约束关键字添加在数据类型后,多个约束使用空格分开</p>
</li>
</ul>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>使两张表建立联系,保证数据的一致性和完整性</p>
<p>具有外键的表成为子表,子表关联的表称为父表(主表)</p>
<ul>
<li><p>添加外键</p>
<ul>
<li><p><code>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列表名)</code></p>
</li>
<li><pre><code class="sql">create table 表名(
    字段名 数据类型,
    ...
    [constraint] [外键名称] foreign key(外键字段名) references 主表(主表列表名)
);
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="删除更新外键"><a href="#删除更新外键" class="headerlink" title="删除更新外键"></a>删除更新外键</h2><ul>
<li><code>no action</code> <code>restrict</code> 父表中删除或更新时,若子表有关联数据则不允许操作</li>
<li><code>cascade</code> 父表中进行删除更新时,若有外键则对外键同步进行删除或更新</li>
<li><code>set null</code>父表中进行删除或更新时,若有外键,则把外键设置为null</li>
<li><code>set default</code>父表中进行删除或更新时,将外键设置为一个默认值</li>
</ul>
<p><code>alter table 表名 add constraint 外键名称 foreign key(外键字段) references 主表名(主表字段名) on update 关键字 on delete 关键字;</code></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>五子棋</title>
    <url>/2023/01/07/%E4%BA%94%E5%AD%90%E6%A3%8B/</url>
    <content><![CDATA[<h1 id="java实现五子棋"><a href="#java实现五子棋" class="headerlink" title="java实现五子棋"></a>java实现五子棋</h1><h2 id="一-结构"><a href="#一-结构" class="headerlink" title="一.结构"></a>一.结构</h2><p>通过图形化编程,实现在15*15的棋盘上进行五子棋游戏,含有悔棋,录制和逐步回放功能,实现以上各功能的类和接口如下</p>
<ol>
<li>GoBangUI  </li>
<li>GoListener</li>
<li>GoData</li>
<li>StartButtonListener</li>
<li>RepetanceButtonListener</li>
<li>EndButtonListener</li>
<li>PlayBackListener</li>
<li>PlayBackUI</li>
<li>NextListener</li>
<li>LastListener</li>
</ol>
<span id="more"></span>

<h2 id="二-功能实现"><a href="#二-功能实现" class="headerlink" title="二.功能实现"></a>二.功能实现</h2><h3 id="1-GoBangUI"><a href="#1-GoBangUI" class="headerlink" title="1.GoBangUI"></a>1.GoBangUI</h3><p> 构建游戏窗口,容纳棋盘,棋子和各按钮,继承<code>JFrame</code>类</p>
<p>在构造函数中绘制棋盘,使用空布局设定”开始游戏”按钮,”悔棋”按钮,”结束游戏”按钮和”回放”按钮的位置,并为各按钮设置监听器</p>
<p>重写<code>JFrame</code>类中的<code>paint()</code>方法,使窗口改变布局时重新显示按钮,棋盘和棋子,其中棋子的数据存放在<code>GoData</code>接口中</p>
<p>在该类中定义静态<code>GoBangUI</code> 对象 ui,以便于在悔棋和结束游戏时在监听器中调用ui对象来进行重新绘制</p>
<p>在该类中定义程序入口,执行<code>ui=new GoBangUI();</code></p>
<p>完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoBangUI</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">GoData</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> GoBangUI ui;</span><br><span class="line">    <span class="type">GoListener</span> <span class="variable">gl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoListener</span>();</span><br><span class="line">    <span class="keyword">static</span> JButton start=<span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> JButton repentance=<span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> JButton end=<span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> JButton playBack=<span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> EndButtonListener endListener=<span class="keyword">new</span> <span class="title class_">EndButtonListener</span>();</span><br><span class="line">    <span class="keyword">static</span> RepetanceButtonListener repentanceListener=<span class="keyword">new</span> <span class="title class_">RepetanceButtonListener</span>();</span><br><span class="line">    <span class="keyword">static</span> StartButtonListener startListener=<span class="keyword">new</span> <span class="title class_">StartButtonListener</span>();</span><br><span class="line">    <span class="keyword">static</span> PlayBackListener playBackListener=<span class="keyword">new</span> <span class="title class_">PlayBackListener</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GoBangUI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化棋盘数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ROW;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;COL;++j)&#123;</span><br><span class="line">                Data[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTitle(<span class="string">&quot;五子棋&quot;</span>);</span><br><span class="line">        setSize(<span class="number">700</span>,<span class="number">750</span>);</span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setLayout(<span class="literal">null</span>);</span><br><span class="line">        addMouseListener(gl);</span><br><span class="line">        gl.g=getGraphics(); <span class="comment">//传递了一个引用?</span></span><br><span class="line">        <span class="comment">//开始按钮</span></span><br><span class="line">        start.addActionListener(startListener);</span><br><span class="line">        start.setText(<span class="string">&quot;开始游戏&quot;</span>);</span><br><span class="line">        <span class="comment">//Dimension startDimension=new Dimension();</span></span><br><span class="line">        <span class="comment">//startDimension.setSize(80,30);</span></span><br><span class="line">        <span class="comment">//start.setPreferredSize(startDimension);</span></span><br><span class="line">        start.setBounds(<span class="number">100</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">30</span>);</span><br><span class="line">        add(start);</span><br><span class="line">        <span class="comment">//悔棋按钮</span></span><br><span class="line">        repentance.addActionListener(repentanceListener);</span><br><span class="line">        repentance.setText(<span class="string">&quot;悔棋&quot;</span>);</span><br><span class="line">        repentance.setBounds(<span class="number">250</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">30</span>);</span><br><span class="line">        add(repentance);</span><br><span class="line">        <span class="comment">//结束按钮</span></span><br><span class="line">        end.addActionListener(endListener);</span><br><span class="line">        end.setText(<span class="string">&quot;结束游戏&quot;</span>);</span><br><span class="line">        end.setBounds(<span class="number">400</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">30</span>);</span><br><span class="line">        add(end);</span><br><span class="line">        <span class="comment">//回放按钮</span></span><br><span class="line">        playBack.addActionListener(playBackListener);</span><br><span class="line">        playBack.setText(<span class="string">&quot;回放&quot;</span>);</span><br><span class="line">        playBack.setBounds(<span class="number">550</span>,<span class="number">10</span>,<span class="number">120</span>,<span class="number">30</span>);</span><br><span class="line">        add(playBack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        start.repaint();</span><br><span class="line">        repentance.repaint();</span><br><span class="line">        end.repaint();</span><br><span class="line">        playBack.repaint();</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">79</span>, <span class="number">227</span>, <span class="number">165</span>);</span><br><span class="line">        g.setColor(color);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),getHeight());</span><br><span class="line">        g.setColor(Color.BLACK);</span><br><span class="line">        <span class="comment">//绘制棋盘</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ROW;++i)&#123;</span><br><span class="line">            g.drawLine(X,Y+i*SIZE,X+(ROW-<span class="number">1</span>)*SIZE,Y+i*SIZE);</span><br><span class="line">            g.drawLine(X+i*SIZE,Y,X+i*SIZE,Y+(COL-<span class="number">1</span>)*SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//恢复棋盘</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ROW;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;COL;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Data[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.fillOval(X+i*SIZE-SIZE/<span class="number">2</span>,Y+j*SIZE-SIZE/<span class="number">2</span>,SIZE,SIZE);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Data[i][j]==<span class="number">2</span>)&#123;</span><br><span class="line">                    g.setColor(Color.white);</span><br><span class="line">                    g.fillOval(X+i*SIZE-SIZE/<span class="number">2</span>,Y+j*SIZE-SIZE/<span class="number">2</span>,SIZE,SIZE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ui = <span class="keyword">new</span> <span class="title class_">GoBangUI</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-GoListener"><a href="#2-GoListener" class="headerlink" title="2.GoListener"></a>2.GoListener</h3><p>​	该类实现MouseListener接口,对鼠标进行监听,当按下重写mousePressed方法,当按下鼠标时获取鼠标指针的位置,根据位置判断出该棋子的行数和列数,将其显示在棋盘上并存储在GoData中的Data二维数组中记录棋子信息,还存储在双向队列 Rows和Cols中,用于录制该棋局的每一步操作用于回放.</p>
<p>​	在该类中实现isEnd(int r,int c)方法,用于判断是否出现五个相同的棋子连在一起的情况,判断输赢</p>
<p>​	完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoListener</span> <span class="keyword">implements</span> <span class="title class_">MouseListener</span>, GoData &#123;</span><br><span class="line">    Graphics g;</span><br><span class="line">    <span class="comment">//黑子先走</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">chessFlag</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">//0:不能下棋,1:黑棋,2:白棋</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> r;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> c;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] x = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] y = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; ) &#123;</span><br><span class="line">            i+=<span class="number">2</span>;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            row = r + x[i];</span><br><span class="line">            col = c + y[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row &gt;= ROW || row &lt; <span class="number">0</span> || col &gt;= COL || col &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Data[row][col] == Data[r][c]) &#123;</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                    row += x[i];</span><br><span class="line">                    col += y[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            row = r + x[i + <span class="number">1</span>];</span><br><span class="line">            col = c + y[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row &gt;= ROW || row &lt; <span class="number">0</span> || col &gt;= COL || col &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Data[row][col] == Data[r][c]) &#123;</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                    row += x[i + <span class="number">1</span>];</span><br><span class="line">                    col += y[i + <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum &gt;= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> event.getX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> event.getY();</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算x,y坐标对应的行列</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt;= X) &#123;</span><br><span class="line">            row = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= ROW * SIZE + X) &#123;</span><br><span class="line">            row = ROW - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row = ((x - X) / SIZE) + ((x - X) % SIZE &gt; SIZE / <span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y &lt;= Y) &#123;</span><br><span class="line">            col = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt;= COL * SIZE + Y) &#123;</span><br><span class="line">            col = COL - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            col = ((y - Y) / SIZE) + ((y - Y) % SIZE &gt; SIZE / <span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (chessFlag == <span class="number">0</span>) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;请先开始游戏&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果该位置没有棋子</span></span><br><span class="line">        <span class="keyword">if</span> (Data[row][col] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//录制棋局</span></span><br><span class="line">            Rows.addLast(row);</span><br><span class="line">            Cols.addLast(col);</span><br><span class="line">            <span class="keyword">if</span> (chessFlag == <span class="number">1</span>) &#123;</span><br><span class="line">                Data[row][col] = chessFlag;</span><br><span class="line">                g.setColor(Color.black);</span><br><span class="line">                g.fillOval(X + row * SIZE - SIZE / <span class="number">2</span>, Y + col * SIZE - SIZE / <span class="number">2</span>, SIZE, SIZE);</span><br><span class="line">                <span class="keyword">if</span> (isEnd(row, col)) &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;黑子获胜&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                chessFlag = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chessFlag == <span class="number">2</span>) &#123;</span><br><span class="line">                Data[row][col] = chessFlag;</span><br><span class="line">                g.setColor(Color.white);</span><br><span class="line">                g.fillOval(X + row * SIZE - SIZE / <span class="number">2</span>, Y + col * SIZE - SIZE / <span class="number">2</span>, SIZE, SIZE);</span><br><span class="line">                <span class="keyword">if</span> (isEnd(row, col)) &#123;</span><br><span class="line">                    JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;白子获胜&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                chessFlag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-GoData"><a href="#3-GoData" class="headerlink" title="3.GoData"></a>3.GoData</h3><p>该接口用于设置棋盘的行列数,间距,棋盘左上角坐标以及存储当局棋子信息和回放棋子信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoData</span> &#123;</span><br><span class="line">    <span class="type">int</span> X=<span class="number">50</span>;</span><br><span class="line">    <span class="type">int</span> Y=<span class="number">110</span>;</span><br><span class="line">    <span class="type">int</span> SIZE=<span class="number">40</span>;</span><br><span class="line">    <span class="type">int</span> ROW=<span class="number">15</span>;</span><br><span class="line">    <span class="type">int</span> COL=<span class="number">15</span>;</span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; rows=new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; cols=new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    Deque&lt;Integer&gt; Rows=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; Cols=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="type">int</span>[][] Data=<span class="keyword">new</span> <span class="title class_">int</span>[ROW+<span class="number">1</span>][COL+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[][] PlayBackData=<span class="keyword">new</span> <span class="title class_">int</span>[ROW+<span class="number">1</span>][COL+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-StartButtonListener"><a href="#4-StartButtonListener" class="headerlink" title="4.StartButtonListener"></a>4.StartButtonListener</h3><p>用于监听开始按钮,按下开始按钮后设置<code>chessFlag</code>&#x3D;1,即黑子先走,并情况上一局的回放信息以记录本局的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartButtonListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>,GoData &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(GoListener.chessFlag!=<span class="number">0</span>)&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;游戏已经开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//黑子先走</span></span><br><span class="line">        PlayBackUI.round+=<span class="number">1</span>;</span><br><span class="line">        GoListener.chessFlag=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//清空回放记录</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ROW;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;COL;++j)&#123;</span><br><span class="line">                PlayBackData[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        PlayBackUI.cur=<span class="number">0</span>;</span><br><span class="line">        GoData.Rows.clear();</span><br><span class="line">        GoData.Cols.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-RepetanceButtonListener"><a href="#5-RepetanceButtonListener" class="headerlink" title="5.RepetanceButtonListener"></a>5.RepetanceButtonListener</h3><p>监听悔棋按钮,当按下悔棋按钮后通过Rows和Cols获取上一步的信息,将其从棋局中和录制信息中删去,并通过GoBangUI.ui调用paint刷新棋盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepetanceButtonListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>, GoData &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//获取最后一步</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> Rows.getLast();</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> Cols.getLast();</span><br><span class="line">        <span class="comment">//清除最后一步</span></span><br><span class="line">        Data[row][col] = <span class="number">0</span>;</span><br><span class="line">        GoListener.chessFlag=GoListener.chessFlag==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">        Rows.removeLast();</span><br><span class="line">        Cols.removeLast();</span><br><span class="line">        <span class="comment">//重新绘制棋盘</span></span><br><span class="line">        GoBangUI.ui.paint(GoBangUI.ui.getGraphics());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-EndButtonListener"><a href="#6-EndButtonListener" class="headerlink" title="6.EndButtonListener"></a>6.EndButtonListener</h3><p>监听结束游戏按钮,当按下结束游戏按钮后清空棋盘,设置chessFlag&#x3D;0等待下局游戏开始,并刷新棋盘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EndButtonListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>,GoData&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//清空棋盘</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ROW;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;COL;++j)&#123;</span><br><span class="line">                Data[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        GoListener.chessFlag=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//重新绘制棋盘</span></span><br><span class="line">        GoBangUI.ui.paint(GoBangUI.ui.getGraphics());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-PlayBackListener"><a href="#7-PlayBackListener" class="headerlink" title="7.PlayBackListener"></a>7.PlayBackListener</h3><p>监听回放按钮,当按下回放按钮后创建<code>PlayBackUI</code>对象并将总步数传递给<code>PlayBackUI</code>中的静态变量<code>sum</code>,用于判断回放时是否还有下一步</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayBackListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        PlayBackUI.sum=GoData.Rows.size();</span><br><span class="line">        PlayBackUI.ui= <span class="keyword">new</span> <span class="title class_">PlayBackUI</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-PlayBackUI"><a href="#8-PlayBackUI" class="headerlink" title="8.PlayBackUI"></a>8.PlayBackUI</h3><p>回放棋局的窗口,含有上一步按钮和下一步按钮,通过点击按钮来操作回放,创建静态<code>PlayBackUI</code>对象<code>ui</code>用于在监听器中刷新界面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlayBackUI</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">GoData</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">round</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//总步数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Rows.size();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">//当前步数</span></span><br><span class="line">    <span class="keyword">static</span> PlayBackUI ui;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">JButton</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">JButton</span> <span class="variable">last</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">NextListener</span> <span class="variable">nextListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NextListener</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">LastListener</span> <span class="variable">lastListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LastListener</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PlayBackUI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化棋盘数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ROW; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; COL; ++j) &#123;</span><br><span class="line">                Data[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setTitle(<span class="string">&quot;回放&quot;</span>);</span><br><span class="line">        setSize(<span class="number">700</span>, <span class="number">750</span>);</span><br><span class="line">        setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//下一步按钮</span></span><br><span class="line">        <span class="keyword">if</span>(round==<span class="number">1</span>) &#123;</span><br><span class="line">            next.addActionListener(nextListener);</span><br><span class="line">            last.addActionListener(lastListener);</span><br><span class="line">        &#125;</span><br><span class="line">        next.setText(<span class="string">&quot;下一步&quot;</span>);</span><br><span class="line">        next.setBounds(<span class="number">400</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        add(next);</span><br><span class="line">        <span class="comment">//上一步按钮</span></span><br><span class="line">        last.setText(<span class="string">&quot;上一步&quot;</span>);</span><br><span class="line">        last.setBounds(<span class="number">200</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        add(last);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ROW; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; COL; ++j) &#123;</span><br><span class="line">                PlayBackData[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        next.repaint();</span><br><span class="line">        last.repaint();</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">79</span>, <span class="number">227</span>, <span class="number">165</span>);</span><br><span class="line">        g.setColor(color);</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">        g.setColor(Color.BLACK);</span><br><span class="line">        <span class="comment">//绘制棋盘</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ROW; ++i) &#123;</span><br><span class="line">            g.drawLine(X, Y + i * SIZE, X + (ROW - <span class="number">1</span>) * SIZE, Y + i * SIZE);</span><br><span class="line">            g.drawLine(X + i * SIZE, Y, X + i * SIZE, Y + (COL - <span class="number">1</span>) * SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//恢复棋盘</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ROW; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; COL; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (PlayBackData[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.fillOval(X + i * SIZE - SIZE / <span class="number">2</span>, Y + j * SIZE - SIZE / <span class="number">2</span>, SIZE, SIZE);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PlayBackData[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    g.setColor(Color.white);</span><br><span class="line">                    g.fillOval(X + i * SIZE - SIZE / <span class="number">2</span>, Y + j * SIZE - SIZE / <span class="number">2</span>, SIZE, SIZE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-NextListener"><a href="#9-NextListener" class="headerlink" title="9.NextListener"></a>9.NextListener</h3><p>监听回放窗口中的下一步按钮,按下按钮后先判断是否还有下一步,然后通过<code>GoData</code>中的<code>Rows</code>和<code>Cols</code>获取下一步棋的位置信息,将其绘制在棋盘中</p>
<p>将双向队列的队头出队后从队尾入队,使在执行上一步操作时获取上一步棋的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NextListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>,GoData&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//获取下一步并录入到回放棋盘中</span></span><br><span class="line">        <span class="keyword">if</span>(PlayBackUI.cur&lt;PlayBackUI.sum)&#123;</span><br><span class="line">            <span class="type">int</span> row=Rows.getFirst();</span><br><span class="line">            <span class="type">int</span> col=Cols.getFirst();</span><br><span class="line">            Rows.addLast(row);</span><br><span class="line">            Cols.addLast(col);</span><br><span class="line">            Rows.removeFirst();</span><br><span class="line">            Cols.removeFirst();</span><br><span class="line">            PlayBackData[row][col]=(PlayBackUI.cur%<span class="number">2</span>)==<span class="number">0</span>?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">            PlayBackUI.cur+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;没有下一步了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PlayBackUI.ui.paint(PlayBackUI.ui.getGraphics());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-LastListener"><a href="#10-LastListener" class="headerlink" title="10.LastListener"></a>10.LastListener</h3><p>监听回放窗口中的上一步按钮,按下按钮后先判断是否还有上一步,然后通过<code>GoData</code>中的<code>Rows</code>和<code>Cols</code>获取上一步棋的位置信息,将其绘制在棋盘中</p>
<p>将双向队列的队尾出队后从队头入队,使在执行下一步操作时获取下一步棋的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LastListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>,GoData&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">//获取下一步并录入到回放棋盘中</span></span><br><span class="line">        <span class="keyword">if</span>(PlayBackUI.cur&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> row=Rows.getLast();</span><br><span class="line">            <span class="type">int</span> col=Cols.getLast();</span><br><span class="line">            Rows.removeLast();</span><br><span class="line">            Cols.removeLast();</span><br><span class="line">            Rows.addFirst(row);</span><br><span class="line">            Cols.addFirst(col);</span><br><span class="line">            PlayBackData[row][col]=<span class="number">0</span>;</span><br><span class="line">            PlayBackUI.cur-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>, <span class="string">&quot;没有上一步了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PlayBackUI.ui.paint(PlayBackUI.ui.getGraphics());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工程</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
</search>
